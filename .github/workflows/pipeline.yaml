name: pipeline CI/CD Backend-api


env:
    IMAGE_NAME: backend-image
    BUILD_NUMBER: ${{ github.run_number }}


on:
  push:
    branches:
      - main

jobs:
    test-job:
        runs-on: ubuntu-latest
        steps:
        - name: Clone Source Code
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '18'

        - name: install dependencies
          run: npm install

        - name: Run unit Tests
          run: npm test

    snyk-code-security-scan-job:
        runs-on: ubuntu-latest
        needs: test-job
        steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Install Dependency Scanning tool (snyk)
          run: npm install -g snyk

        - name: Snyk Authentication
          run: snyk auth ${{ secrets.SNYK_TOKEN }}

        - name: Run snyk vulnerabilities Scan
          run: snyk test


    build-and-push-job:
        runs-on: ubuntu-latest
        needs: test-job
        steps:
          - name: Clone Source Code
            uses: actions/checkout@v4

          - name: Build Docker image
            run: docker build -t ${{ env.IMAGE_NAME}} .

          - name: login to Dockerhub
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: Tag Docker image with specific version
            run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER}} 

          - name: Push Docker image with specific version
            run: docker push  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER}} 

          - name: Tag Docker image with latest version
            run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

          - name: Push Docker image with latest version
            run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest


    deploy-job:
        runs-on: ubuntu-latest
        needs: build-and-push-job
        steps:
          - name: Connect to the VPS using SSH
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.VPS_HOST }}
              username: ${{ secrets.VPS_USERNAME}}
              password: ${{ secrets.VPS_PASSWORD }}
              script: |
                  cd /home/user/devops-scripts/api
                  sudo git pull
                  sudo docker compose pull
                  sudo docker compose up -d --force-recreate --remove-orphans



        